import{toNestErrors as e,validateFieldsNatively as s}from"@hookform/resolvers";function t(){return t=Object.assign?Object.assign.bind():function(e){for(var s=1;s<arguments.length;s++){var t=arguments[s];for(var r in t)({}).hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},t.apply(null,arguments)}function r(r,n={}){return async(a,o,i)=>{let l=r["~standard"].validate(a);if(l instanceof Promise&&(l=await l),l.issues){const s=function(e,s){const r={};for(let a=0;a<e.length;a++){var n;const o=e[a],i=null==(n=o.path)?void 0:n.join(".");if(i&&(r[i]||(r[i]={message:o.message,type:""}),s)){const e=r[i].types||{};r[i].types=t({},e,{[Object.keys(e).length]:o.message})}}return r}(l.issues,!i.shouldUseNativeValidation&&"all"===i.criteriaMode);return{values:{},errors:e(s,i)}}return i.shouldUseNativeValidation&&s({},i),{values:n.raw?Object.assign({},a):l.value,errors:{}}}}export{r as standardSchemaResolver};
//# sourceMappingURL=standard-schema.modern.mjs.map
